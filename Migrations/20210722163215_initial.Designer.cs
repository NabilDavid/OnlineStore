// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnLineStore.Models;


namespace Task.Migrations
{
    [DbContext(typeof(taskDbContext))]
    [Migration("20210722163215_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Task.Entities.CatProp", b =>
                {
                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<int>("propertyId")
                        .HasColumnType("int");

                    b.HasKey("categoryId", "propertyId");

                    b.HasIndex("propertyId");

                    b.ToTable("catProps");
                });

            modelBuilder.Entity("Task.Entities.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("categoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoryId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Task.Entities.DevProp", b =>
                {
                    b.Property<int>("deviceId")
                        .HasColumnType("int");

                    b.Property<int>("propertyId")
                        .HasColumnType("int");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("deviceId", "propertyId");

                    b.HasIndex("propertyId");

                    b.ToTable("devProps");
                });

            modelBuilder.Entity("Task.Entities.Device", b =>
                {
                    b.Property<int>("deviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("acquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("deviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("memo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("deviceId");

                    b.HasIndex("categoryId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Task.Entities.Property", b =>
                {
                    b.Property<int>("propertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("propertyDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("propertyId");

                    b.ToTable("properties");
                });

            modelBuilder.Entity("Task.Entities.CatProp", b =>
                {
                    b.HasOne("Task.Entities.Category", "category")
                        .WithMany("catProps")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task.Entities.Property", "property")
                        .WithMany("catProps")
                        .HasForeignKey("propertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("property");
                });

            modelBuilder.Entity("Task.Entities.DevProp", b =>
                {
                    b.HasOne("Task.Entities.Device", "device")
                        .WithMany("devProps")
                        .HasForeignKey("deviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task.Entities.Property", "property")
                        .WithMany("devProps")
                        .HasForeignKey("propertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("device");

                    b.Navigation("property");
                });

            modelBuilder.Entity("Task.Entities.Device", b =>
                {
                    b.HasOne("Task.Entities.Category", "Category")
                        .WithMany("devices")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Task.Entities.Category", b =>
                {
                    b.Navigation("catProps");

                    b.Navigation("devices");
                });

            modelBuilder.Entity("Task.Entities.Device", b =>
                {
                    b.Navigation("devProps");
                });

            modelBuilder.Entity("Task.Entities.Property", b =>
                {
                    b.Navigation("catProps");

                    b.Navigation("devProps");
                });
#pragma warning restore 612, 618
        }
    }
}
